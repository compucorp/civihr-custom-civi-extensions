console.log('Controller: FormHoursCtrl');define(['fraction','controllers/controllers'], function(Fraction, controllers){    controllers.controller('FormHoursCtrl',['$scope','$rootScope','$filter',        function($scope, $rootScope, $filter){            var contractHours = $scope.contract.hours,                utilsHoursLocation = $scope.utils.hoursLocation,                locStandHrs = {};            $scope.hrsTypeDefined = false;            contractHours.location_standard_hours = contractHours.location_standard_hours || "1";            locStandHrs = $filter('getObjById')(utilsHoursLocation, contractHours.location_standard_hours);            function updateHours(locStandHrs, hrsTypeId) {                console.log('updateHours(locStandHrs: {standard_hours: '+locStandHrs.standard_hours+', periodicity: '+ locStandHrs.periodicity +'}, hrsTypeId: '+hrsTypeId);                $scope.hrsTypeDefined = typeof contractHours.hours_type !== 'undefined' &&  contractHours.hours_type != null && contractHours.hours_type != '';                if ($scope.hrsTypeDefined) {                    contractHours.hours_unit = locStandHrs.periodicity;                    switch(+hrsTypeId) {                        case 8:                            contractHours.hours_amount = locStandHrs.standard_hours;                            break;                        case 4:                            contractHours.hours_amount = !!contractHours.hours_amount ? contractHours.hours_amount : Math.round(locStandHrs.standard_hours / 2);                            break;                        case 0:                            contractHours.hours_amount = !!contractHours.hours_amount ? contractHours.hours_amount : 0;                            break;                        default:                            contractHours.hours_amount = '';                    }                    return                }                contractHours.hours_unit = '';                contractHours.hours_amount = '';            }            function updateFTE(hrsStandard, hrsAmount){                console.log('updateFTE(hrsStandard: '+hrsStandard+', hrsAmount: '+hrsAmount);                hrsAmount = parseFloat(hrsAmount) || 0,                hrsStandard = parseFloat(hrsStandard) || 0;                var fteFraction = new Fraction(hrsAmount, hrsStandard);                contractHours.fte_num = String(+contractHours.hours_type ? fteFraction.numerator : 0);                contractHours.fte_denom = String(+contractHours.hours_type ? fteFraction.denominator : 0);                contractHours.hours_fte = String(parseFloat(((contractHours.fte_num/contractHours.fte_denom) || 0).toFixed(2)));                $scope.fteFraction = contractHours.fte_num + '/' + contractHours.fte_denom;            }            $scope.$watch('contract.hours.location_standard_hours', function(locStandHrsId){                console.log('$watch: contract.hours.location_standard_hours: '+locStandHrsId);                locStandHrs = $filter('getObjById')(utilsHoursLocation, locStandHrsId);                updateHours(locStandHrs, contractHours.hours_type);                updateFTE(locStandHrs.standard_hours, contractHours.hours_amount);            });            $scope.$watch('contract.hours.hours_type', function(hrsTypeId, hrsTypeIdPrev){                console.log('$watch: contract.hours.hours_type: '+hrsTypeId);                if (hrsTypeId != hrsTypeIdPrev) {                    updateHours(locStandHrs, hrsTypeId);                    updateFTE(locStandHrs.standard_hours, contractHours.hours_amount);                }            });            $scope.$watch('contract.hours.hours_amount', function(hrsAmount, hrsAmountPrev){                console.log('$watch: contract.hours.hours_amount: '+hrsAmount);                if (hrsAmount != hrsAmountPrev) {                    updateFTE(locStandHrs.standard_hours, hrsAmount);                }            });            $scope.$watch('contract.hours.hours_unit', function(hrsUnit, hrsUnitPrev){                console.log('$watch: contract.hours.hours_unit');                if (hrsUnit != hrsUnitPrev) {                    updateFTE(locStandHrs.standard_hours, contractHours.hours_amount);                }            });        }]);});