define(['controllers/controllers'], function(controllers){    controllers.controller('ExampleCtrl',['$scope', '$log', '$routeParams', 'ExampleService', '$route', '$timeout',        function($scope, $log, $routeParams, ExampleService, $route, $timeout){            $log.debug('Controller: ExampleCtrl');            // Validate fields            $scope.validateTitle = function(data) {                console.log(data);                if (data == 'title' || data == ' ') {                    return "Title cannot be title!";                }            };            // Tracks collapsed / expanded rows            $scope.collapsedRows = [];            // Tracks clicked tabs per each row            $scope.view_tab = [];            // Tracks edit data changes on the forms            $scope.edit_data = {};            // Define the add new role URL            $scope.add_new_role_url = $scope.$parent.pathBaseUrl + $scope.$parent.pathIncludeTpl + 'add_new_role.html';            // Store the contractsData            $scope.contractsData = [];            // Contact List to use for the select lists            $scope.contactList = [];            // Implement angular tabs            $scope.changeTab = function(row_id, tab_id) {                $scope.view_tab[row_id] = tab_id;            };            // Check if current tab            $scope.isTab = function(row_id, tab_id) {                if ($scope.view_tab[row_id] == tab_id) {                    return true;                }                return false;            };            // Check for collapsed rows            $scope.isThingsCollapsed = function(row_id) {                if ($scope.collapsedRows[row_id] == true) {                    return true;                }                else if ($scope.collapsedRows[row_id] == false) {                    return false;                }                return true;            };            // Collapse the row or Expand when clicked            $scope.collapseRow = function(row_id) {                // If already collapsed, expand                if ($scope.collapsedRows[row_id] == false) {                    $scope.collapsedRows[row_id] = true;                }                else {                    $scope.collapsedRows[row_id] = false;                }            };            // Set the data from the webservice call            $scope.initData = function(row_id, form_id, data) {                // Check if we have the array already                if (typeof $scope.edit_data[row_id] == "undefined") {                    $scope.edit_data[row_id] = {};                }                $scope.edit_data[row_id][form_id] = data;            }            // Check if the data are changed in the form (based on job role ID)            $scope.isChanged = function(row_id) {                // If there are data it means we edited the form                if ($scope.edit_data[row_id]['is_edit'] == true) {                    return true;                }                return false;            }            // Set the is_edit value            $scope.showSave = function(row_id) {                console.log($scope.edit_data);                $scope.edit_data[row_id]['is_edit'] = true;            }            // Saves the new Job Role            $scope.saveNewRole = function(data) {                $log.debug('Add New Role');                // Create the new job role                createJobRole($scope.edit_data.new_role_id);                // Get job roles based on the passed Contact ID (refresh part of the page)                getJobRolesList($scope.$parent.contactId);                // Hide the add new form                $scope.add_new = false;                // Hide the empty message if visible                $scope.empty = false;            };            // Sets the add new job role form visibility            $scope.add_new_role = function() {                $scope.add_new = true;            }            // Removes the Role based on Role ID            $scope.removeRole = function(row_id) {                $log.debug('Remove Role');                // Delete job role                deleteJobRole(row_id);                // Get job roles based on the passed Contact ID (refresh part of the page)                getJobRolesList($scope.$parent.contactId);            };            $scope.updateRole = function(role_id) {                $log.debug('Update Role');                console.log(role_id);                console.log($scope.edit_data[role_id]);                // Update the job role                updateJobRole(role_id, $scope.edit_data[role_id]);                // Get job roles based on the passed Contact ID (refresh part of the page)                getJobRolesList($scope.$parent.contactId);            }            // Select list for Status options            $scope.filterItems = {};            $scope.filterItems[10] = {id: 10, name: 'Active'};            $scope.filterItems[20] = {id: 20, name: 'Inactive'};            // Select list for Row Types (used for Funders and Cost Centers)            $scope.rowTypes = [ {id: 0, name: 'Fixed'}, {id: 1, name: '%'}];            // Change the current filter value and update the Role Data            $scope.filterChange = function(role_id) {                $log.debug('Update Role status');                // Update the job role                updateJobRole(role_id, $scope.edit_data[role_id]);                // Get job roles based on the passed Contact ID (refresh part of the page)                getJobRolesList($scope.$parent.contactId);            }            // Show Row Type default value            $scope.showRowType = function(object) {                var selected = '';                if(typeof object.type !== "undefined") {                    // Get the human readable Type Value                    selected = $scope.rowTypes[object.type];                    return selected.name;                }                return 'Not set';            }            // Update funder type scope on request            $scope.updateAdditionalRowType = function(role_id, row_type, key, data) {                if (row_type == 'cost_centre') {                    // Update cost centers row                    $scope.edit_data[role_id]['cost_centers'][key]['type'] = data;                }                else {                    // Update funder Type scope as default                    $scope.edit_data[role_id]['funders'][key]['type'] = data;                }            }            // Add additional rows (funder or cost centres)            $scope.addAdditionalRow = function(role_id, row_type) {                console.log(role_id);                console.log(row_type);                // Check if we have the array already                if (typeof $scope.edit_data[role_id] == "undefined") {                    $scope.edit_data[role_id] = {};                }                if (row_type == 'cost_centre') {                    // Add cost centres                    // Check if we have the array already                    if (typeof $scope.edit_data[role_id]['cost_centers'] == "undefined" || !($scope.edit_data[role_id]['cost_centers'] instanceof Array)) {                        $scope.edit_data[role_id]['cost_centers'] = [];                    }                    $scope.edit_data[role_id]['cost_centers'].push({                        id: $scope.edit_data[role_id]['cost_centers'].length + 1,                        cost_centre_id: '',                        type: 1,                        percentage: 0,                        amount: 0                    });                }                else {                    // As default add funder rows                    // Check if we have the array already                    if (typeof $scope.edit_data[role_id]['funders'] == "undefined" || !($scope.edit_data[role_id]['funders'] instanceof Array)) {                        $scope.edit_data[role_id]['funders'] = [];                    }                    $scope.edit_data[role_id]['funders'].push({                        id: $scope.edit_data[role_id]['funders'].length + 1,                        funder_id: '',                        type: 1,                        percentage: 0,                        amount: 0                    });                }            };            // Delete Additional rows (funder or cost centres)            $scope.deleteAdditionalRow = function(role_id, row_type, row_id) {                if (row_type == 'cost_centre') {                    // Remove the cost centre row                    $scope.edit_data[role_id]['cost_centers'].splice(row_id, 1);                }                else {                    // Remove the funder row as default                    $scope.edit_data[role_id]['funders'].splice(row_id, 1);                }            };            // Variable to check if we adding new job role            var job_roles = this;            // Get job roles based on the passed Contact ID            getJobRolesList($scope.$parent.contactId);            // Get the contact list and store the data            getContactList();            function getContactList() {                ExampleService.getContactList().then(function(data){                        if (data.is_error == 1) {                            job_roles.message_type = 'alert-danger';                            job_roles.message = 'Cannot get contact lit!';                        }                        else {                            // Pass the contact list to the scope                            var contactList = [];                            for (var i = 0; i < data.count; i++) {                                // Build the contact list                                contactList.push({id: data.values[i]['id'], sort_name: data.values[i]['sort_name']});                            }                            // Store the ContractsData what we can reuse later                            job_roles.contactList = contactList;                            job_roles.message_type = 'alert-success';                            job_roles.message = 'Contact list OK!';                        }                        // Hide the message after some seconds                        $timeout(function() {                            job_roles.message = null;                        }, 3000);                    },                    function(errorMessage){                        $scope.error = errorMessage;                    });            }            // Implements the "getAllJobRoles" service            function getJobRolesList(contact_id) {                // Get the job contracts for the contact                ExampleService.getContracts(contact_id).then(function(data){                        var job_contract_ids = [];                        var contractsData = {};                        // If we have job contracts, try to get the job roles for the contract                        if (data.count != 0) {                            for (var i = 0; i < data.count; i++) {                                // Job contract IDs which will be passed to the "getAllJobRoles" service                                job_contract_ids.push(data.values[i]['id']);                                contractsData[data.values[i]['id']] = {id: data.values[i]['id'], title: data.values[i]['title']};                            }                            // Store the ContractsData what we can reuse later                            job_roles.contractsData = contractsData;                            ExampleService.getAllJobRoles(job_contract_ids).then(function(data){                                    job_roles.getData = data.values;                                    if (data.is_error == 1) {                                        job_roles.status = 'Data load failure';                                    }                                    else {                                        if (data.count == 0) {                                            job_roles.empty = 'No Job Roles found!';                                        }                                        else {                                            job_roles.empty = null;                                        }                                        job_roles.status = 'Data load OK';                                    }                            },                            function(errorMessage){                                $scope.error = errorMessage;                            });                        }                        else {                            console.log('no job contract');                            job_roles.empty = 'No Job Contracts found for this Contact!';                        }                },                function(errorMessage){                    $scope.error = errorMessage;                });            }            // Implements the "deleteJobRole" service            function deleteJobRole(job_role_id) {                ExampleService.deleteJobRole(job_role_id).then(function(data){                        if (data.is_error == 1) {                            job_roles.message_type = 'alert-danger';                            job_roles.message = 'Role delete failure!';                        }                        else {                            job_roles.message_type = 'alert-success';                            job_roles.message = 'Role deleted successfully!';                        }                        // Hide the message after some seconds                        $timeout(function() {                            job_roles.message = null;                        }, 3000);                    },                    function(errorMessage){                        $scope.error = errorMessage;                    });            }            // Implements the "createJobRole" service            function createJobRole(job_roles_data) {                ExampleService.createJobRole(job_roles_data).then(function(data){                        if (data.is_error == 1) {                            job_roles.message_type = 'alert-danger';                            job_roles.message = 'Role creation failed!';                        }                        else {                            job_roles.message_type = 'alert-success';                            job_roles.message = 'Role added successfully!';                        }                        // Hide the message after some seconds                        $timeout(function() {                            job_roles.message = null;                        }, 3000);                    },                    function(errorMessage){                        $scope.error = errorMessage;                    });            }            // Implements the "updateJobRole" service            function updateJobRole(role_id, job_roles_data) {                ExampleService.updateJobRole(role_id, job_roles_data).then(function(data){                        if (data.is_error == 1) {                            job_roles.message_type = 'alert-danger';                            job_roles.message = 'Role update failed!';                        }                        else {                            job_roles.message_type = 'alert-success';                            job_roles.message = 'Role updated successfully!';                        }                        // Hide the message after some seconds                        $timeout(function() {                            job_roles.message = null;                        }, 3000);                    },                    function(errorMessage){                        $scope.error = errorMessage;                    });            }        }]);});